generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model client {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(dbgenerated("(curtime())")) @db.Timestamp(0)
  name       String   @db.VarChar(55)
  cpf        String   @unique(map: "cpf_UNIQUE") @db.VarChar(14)
  email      String   @unique(map: "email_UNIQUE") @db.VarChar(55)
  ticket     ticket[]
}

model event {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(dbgenerated("(curtime())")) @db.Timestamp(0)
  name       String   @db.VarChar(55)
  capacity   Int
  date       DateTime @db.Date
  user_id    Int
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_user1")
  ticket     ticket[]

  @@index([user_id], map: "fk_event_user1_idx")
}

model profile {
  id      Int    @id @default(autoincrement())
  profile String @db.VarChar(20)
  user    user[]
}

model sale {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(dbgenerated("(curtime())")) @db.Timestamp(0)
  user_id    Int
  ticket_id  Int
  ticket     ticket   @relation(fields: [ticket_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sale_ticket1")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sale_user1")

  @@index([ticket_id], map: "fk_sale_ticket1_idx")
  @@index([user_id], map: "fk_sale_user1_idx")
}

model sector {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(dbgenerated("(curtime())")) @db.Timestamp(0)
  name       String   @db.VarChar(55)
  capacity   Int
  ticket     ticket[]
}

model status {
  id     Int      @id @default(autoincrement())
  status String   @db.VarChar(20)
  ticket ticket[]
}

model ticket {
  id        Int     @id @default(autoincrement())
  code      String  @unique(map: "code_UNIQUE") @db.VarChar(20)
  event_id  Int
  status_id Int
  client_id Int
  sector_id Int
  sale      sale[]
  client    client  @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ticket_client1")
  event     event   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ticket_event1")
  sector    sector  @relation(fields: [sector_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ticket_sector1")
  status    status  @relation(fields: [status_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ticket_status1")
  totem     totem[]

  @@index([client_id], map: "fk_ticket_client1_idx")
  @@index([event_id], map: "fk_ticket_event1_idx")
  @@index([sector_id], map: "fk_ticket_sector1_idx")
  @@index([status_id], map: "fk_ticket_status1_idx")
}

model totem {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(dbgenerated("(curtime())")) @db.Timestamp(0)
  user_id    Int
  ticket_id  Int
  ticket     ticket   @relation(fields: [ticket_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_totem_ticket1")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_totem_user1")

  @@index([ticket_id], map: "fk_totem_ticket1_idx")
  @@index([user_id], map: "fk_totem_user1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(dbgenerated("(curtime())")) @db.Timestamp(0)
  name       String   @db.VarChar(55)
  cpf        String   @unique(map: "cpf_UNIQUE") @db.VarChar(14)
  email      String   @unique(map: "email_UNIQUE") @db.VarChar(55)
  password   String   @db.VarChar(255)
  profile_id Int
  event      event[]
  sale       sale[]
  totem      totem[]
  profile    profile  @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_profile")

  @@index([profile_id], map: "fk_user_profile_idx")
}
